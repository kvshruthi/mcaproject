{"ast":null,"code":"var tokenize = require('./tokenize');\n\nvar languageProcessor = require('./language-processor');\n/**\n * Constructor\n * @param {Object} options - Instance options\n */\n\n\nvar Sentiment = function (options) {\n  this.options = options;\n};\n/**\n * Registers the specified language\n *\n * @param {String} languageCode\n *     - Two-digit code for the language to register\n * @param {Object} language\n *     - The language module to register\n */\n\n\nSentiment.prototype.registerLanguage = function (languageCode, language) {\n  languageProcessor.addLanguage(languageCode, language);\n};\n/**\n * Performs sentiment analysis on the provided input 'phrase'.\n *\n * @param {String} phrase\n *     - Input phrase\n * @param {Object} opts\n *     - Options\n * @param {Object} opts.language\n *     - Input language code (2 digit code), defaults to 'en'\n * @param {Object} opts.extras\n *     - Optional sentiment additions to AFINN (hash k/v pairs)\n * @param {function} callback\n *     - Optional callback\n * @return {Object}\n */\n\n\nSentiment.prototype.analyze = function (phrase, opts, callback) {\n  // Parse arguments\n  if (typeof phrase === 'undefined') phrase = '';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var languageCode = opts.language || 'en';\n  var labels = languageProcessor.getLabels(languageCode); // Merge extra labels\n\n  if (typeof opts.extras === 'object') {\n    labels = Object.assign(labels, opts.extras);\n  } // Storage objects\n\n\n  var tokens = tokenize(phrase),\n      score = 0,\n      words = [],\n      positive = [],\n      negative = [],\n      calculation = []; // Iterate over tokens\n\n  var i = tokens.length;\n\n  while (i--) {\n    var obj = tokens[i];\n    if (!labels.hasOwnProperty(obj)) continue;\n    words.push(obj); // Apply scoring strategy\n\n    var tokenScore = labels[obj]; // eslint-disable-next-line max-len\n\n    tokenScore = languageProcessor.applyScoringStrategy(languageCode, tokens, i, tokenScore);\n    if (tokenScore > 0) positive.push(obj);\n    if (tokenScore < 0) negative.push(obj);\n    score += tokenScore;\n    var zipObj = {}; // Calculations breakdown\n\n    zipObj[obj] = tokenScore;\n    calculation.push(zipObj);\n  }\n\n  var result = {\n    score: score,\n    comparative: tokens.length > 0 ? score / tokens.length : 0,\n    calculation: calculation,\n    tokens: tokens,\n    words: words,\n    positive: positive,\n    negative: negative\n  }; // Handle optional async interface\n\n  if (typeof callback === 'function') {\n    process.nextTick(function () {\n      callback(null, result);\n    });\n  } else {\n    return result;\n  }\n};\n\nmodule.exports = Sentiment;","map":{"version":3,"sources":["C:/Users/SHRUTHI KV/Desktop/project_positive/my-app/node_modules/sentiment/lib/index.js"],"names":["tokenize","require","languageProcessor","Sentiment","options","prototype","registerLanguage","languageCode","language","addLanguage","analyze","phrase","opts","callback","labels","getLabels","extras","Object","assign","tokens","score","words","positive","negative","calculation","i","length","obj","hasOwnProperty","push","tokenScore","applyScoringStrategy","zipObj","result","comparative","process","nextTick","module","exports"],"mappings":"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","sourcesContent":["var tokenize = require('./tokenize');\nvar languageProcessor = require('./language-processor');\n\n/**\n * Constructor\n * @param {Object} options - Instance options\n */\nvar Sentiment = function (options) {\n    this.options = options;\n};\n\n/**\n * Registers the specified language\n *\n * @param {String} languageCode\n *     - Two-digit code for the language to register\n * @param {Object} language\n *     - The language module to register\n */\nSentiment.prototype.registerLanguage = function (languageCode, language) {\n    languageProcessor.addLanguage(languageCode, language);\n};\n\n/**\n * Performs sentiment analysis on the provided input 'phrase'.\n *\n * @param {String} phrase\n *     - Input phrase\n * @param {Object} opts\n *     - Options\n * @param {Object} opts.language\n *     - Input language code (2 digit code), defaults to 'en'\n * @param {Object} opts.extras\n *     - Optional sentiment additions to AFINN (hash k/v pairs)\n * @param {function} callback\n *     - Optional callback\n * @return {Object}\n */\nSentiment.prototype.analyze = function (phrase, opts, callback) {\n    // Parse arguments\n    if (typeof phrase === 'undefined') phrase = '';\n    if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n    }\n    opts = opts || {};\n\n    var languageCode = opts.language || 'en';\n    var labels = languageProcessor.getLabels(languageCode);\n\n    // Merge extra labels\n    if (typeof opts.extras === 'object') {\n        labels = Object.assign(labels, opts.extras);\n    }\n\n    // Storage objects\n    var tokens      = tokenize(phrase),\n        score       = 0,\n        words       = [],\n        positive    = [],\n        negative    = [],\n        calculation = [];\n\n    // Iterate over tokens\n    var i = tokens.length;\n    while (i--) {\n        var obj = tokens[i];\n        if (!labels.hasOwnProperty(obj)) continue;\n        words.push(obj);\n\n        // Apply scoring strategy\n        var tokenScore = labels[obj];\n        // eslint-disable-next-line max-len\n        tokenScore = languageProcessor.applyScoringStrategy(languageCode, tokens, i, tokenScore);\n        if (tokenScore > 0) positive.push(obj);\n        if (tokenScore < 0) negative.push(obj);\n        score += tokenScore;\n        \n        var zipObj = {}; \n        // Calculations breakdown\n        zipObj[obj] = tokenScore;\n        calculation.push(zipObj);\n    }\n\n    var result = {\n        score:          score,\n        comparative:    tokens.length > 0 ? score / tokens.length : 0,\n        calculation:    calculation,\n        tokens:         tokens,\n        words:          words,\n        positive:       positive,\n        negative:       negative\n    };\n\n    // Handle optional async interface\n    if (typeof callback === 'function') {\n        process.nextTick(function () {\n            callback(null, result);\n        });\n    } else {\n        return result;\n    }\n};\n\nmodule.exports = Sentiment;\n"]},"metadata":{},"sourceType":"script"}