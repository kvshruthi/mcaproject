{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n\nconst gapicConfig = require(\"./language_service_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Provides text analysis operations such as sentiment analysis and entity\n *  recognition.\n * @class\n * @memberof v1\n */\n\n\nclass LanguageServiceClient {\n  /**\n   * Construct an instance of LanguageServiceClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include the service address and port.\n\n    const staticMembers = this.constructor;\n    const servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    const port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath,\n        port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port;\n    opts.clientConfig = opts.clientConfig || {};\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser) {\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.language.v1.LanguageService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.languageServiceStub) {\n      return this.languageServiceStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.language.v1.LanguageService.\n\n\n    this.languageServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.language.v1.LanguageService') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.language.v1.LanguageService, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const languageServiceStubMethods = ['analyzeSentiment', 'analyzeEntities', 'analyzeEntitySentiment', 'analyzeSyntax', 'classifyText', 'annotateText'];\n\n    for (const methodName of languageServiceStubMethods) {\n      const callPromise = this.languageServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] || this.descriptors.stream[methodName] || this.descriptors.longrunning[methodName]);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.languageServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'language.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'language.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-language', 'https://www.googleapis.com/auth/cloud-platform'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Analyzes the sentiment of the provided text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {google.cloud.language.v1.EncodingType} request.encodingType\n   *   The encoding type used by the API to calculate sentence offsets.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [AnalyzeSentimentResponse]{@link google.cloud.language.v1.AnalyzeSentimentResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  analyzeSentiment(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.analyzeSentiment(request, options, callback);\n  }\n  /**\n   * Finds named entities (currently proper names and common nouns) in the text\n   * along with entity types, salience, mentions for each entity, and\n   * other properties.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {google.cloud.language.v1.EncodingType} request.encodingType\n   *   The encoding type used by the API to calculate offsets.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [AnalyzeEntitiesResponse]{@link google.cloud.language.v1.AnalyzeEntitiesResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  analyzeEntities(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.analyzeEntities(request, options, callback);\n  }\n  /**\n   * Finds entities, similar to {@link google.cloud.language.v1.LanguageService.AnalyzeEntities|AnalyzeEntities} in the text and analyzes\n   * sentiment associated with each entity and its mentions.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {google.cloud.language.v1.EncodingType} request.encodingType\n   *   The encoding type used by the API to calculate offsets.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [AnalyzeEntitySentimentResponse]{@link google.cloud.language.v1.AnalyzeEntitySentimentResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  analyzeEntitySentiment(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.analyzeEntitySentiment(request, options, callback);\n  }\n  /**\n   * Analyzes the syntax of the text and provides sentence boundaries and\n   * tokenization along with part of speech tags, dependency trees, and other\n   * properties.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {google.cloud.language.v1.EncodingType} request.encodingType\n   *   The encoding type used by the API to calculate offsets.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [AnalyzeSyntaxResponse]{@link google.cloud.language.v1.AnalyzeSyntaxResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  analyzeSyntax(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.analyzeSyntax(request, options, callback);\n  }\n  /**\n   * Classifies a document into categories.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [ClassifyTextResponse]{@link google.cloud.language.v1.ClassifyTextResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  classifyText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.classifyText(request, options, callback);\n  }\n  /**\n   * A convenience method that provides all the features that analyzeSentiment,\n   * analyzeEntities, and analyzeSyntax provide in one call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.language.v1.Document} request.document\n   *   Input document.\n   * @param {google.cloud.language.v1.AnnotateTextRequest.Features} request.features\n   *   The enabled features.\n   * @param {google.cloud.language.v1.EncodingType} request.encodingType\n   *   The encoding type used by the API to calculate offsets.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [AnnotateTextResponse]{@link google.cloud.language.v1.AnnotateTextResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   */\n\n\n  annotateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    this.initialize();\n    return this.innerApiCalls.annotateText(request, options, callback);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.languageServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.LanguageServiceClient = LanguageServiceClient;","map":{"version":3,"sources":["../../../src/v1/language_service_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./language_service_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Provides text analysis operations such as sentiment analysis and entity\n *  recognition.\n * @class\n * @memberof v1\n */\nclass LanguageServiceClient {\n    /**\n     * Construct an instance of LanguageServiceClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        opts.clientConfig = opts.clientConfig || {};\n        const isBrowser = typeof window !== 'undefined';\n        if (isBrowser) {\n            opts.fallback = true;\n        }\n        // If we are in browser, we are already using fallback because of the\n        // \"browser\" field in package.json.\n        // But if we were explicitly requested to use fallback, let's do it now.\n        this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.language.v1.LanguageService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.languageServiceStub) {\n            return this.languageServiceStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.language.v1.LanguageService.\n        this.languageServiceStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.language.v1.LanguageService')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.language.v1.LanguageService, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const languageServiceStubMethods = [\n            'analyzeSentiment',\n            'analyzeEntities',\n            'analyzeEntitySentiment',\n            'analyzeSyntax',\n            'classifyText',\n            'annotateText',\n        ];\n        for (const methodName of languageServiceStubMethods) {\n            const callPromise = this.languageServiceStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                this.descriptors.longrunning[methodName]);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.languageServiceStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'language.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'language.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-language',\n            'https://www.googleapis.com/auth/cloud-platform',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Analyzes the sentiment of the provided text.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {google.cloud.language.v1.EncodingType} request.encodingType\n     *   The encoding type used by the API to calculate sentence offsets.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [AnalyzeSentimentResponse]{@link google.cloud.language.v1.AnalyzeSentimentResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    analyzeSentiment(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.analyzeSentiment(request, options, callback);\n    }\n    /**\n     * Finds named entities (currently proper names and common nouns) in the text\n     * along with entity types, salience, mentions for each entity, and\n     * other properties.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {google.cloud.language.v1.EncodingType} request.encodingType\n     *   The encoding type used by the API to calculate offsets.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [AnalyzeEntitiesResponse]{@link google.cloud.language.v1.AnalyzeEntitiesResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    analyzeEntities(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.analyzeEntities(request, options, callback);\n    }\n    /**\n     * Finds entities, similar to {@link google.cloud.language.v1.LanguageService.AnalyzeEntities|AnalyzeEntities} in the text and analyzes\n     * sentiment associated with each entity and its mentions.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {google.cloud.language.v1.EncodingType} request.encodingType\n     *   The encoding type used by the API to calculate offsets.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [AnalyzeEntitySentimentResponse]{@link google.cloud.language.v1.AnalyzeEntitySentimentResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    analyzeEntitySentiment(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.analyzeEntitySentiment(request, options, callback);\n    }\n    /**\n     * Analyzes the syntax of the text and provides sentence boundaries and\n     * tokenization along with part of speech tags, dependency trees, and other\n     * properties.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {google.cloud.language.v1.EncodingType} request.encodingType\n     *   The encoding type used by the API to calculate offsets.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [AnalyzeSyntaxResponse]{@link google.cloud.language.v1.AnalyzeSyntaxResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    analyzeSyntax(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.analyzeSyntax(request, options, callback);\n    }\n    /**\n     * Classifies a document into categories.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [ClassifyTextResponse]{@link google.cloud.language.v1.ClassifyTextResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    classifyText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.classifyText(request, options, callback);\n    }\n    /**\n     * A convenience method that provides all the features that analyzeSentiment,\n     * analyzeEntities, and analyzeSyntax provide in one call.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.language.v1.Document} request.document\n     *   Input document.\n     * @param {google.cloud.language.v1.AnnotateTextRequest.Features} request.features\n     *   The enabled features.\n     * @param {google.cloud.language.v1.EncodingType} request.encodingType\n     *   The encoding type used by the API to calculate offsets.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [AnnotateTextResponse]{@link google.cloud.language.v1.AnnotateTextResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    annotateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        this.initialize();\n        return this.innerApiCalls.annotateText(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.languageServiceStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LanguageServiceClient = LanguageServiceClient;\n//# sourceMappingURL=language_service_client.js.map"]},"metadata":{},"sourceType":"script"}