{"ast":null,"code":"var emojis = require('../build/emoji.json'); // English is loaded by default\n\n\nvar enLanguage = require('../languages/en/index'); // Add emojis\n\n\nObject.assign(enLanguage.labels, emojis); // Cache loaded languages\n\nvar languages = {\n  en: enLanguage\n};\nmodule.exports = {\n  /**\r\n   * Registers the specified language\r\n   *\r\n   * @param {String} languageCode\r\n   *     - Two-digit code for the language to register\r\n   * @param {Object} language\r\n   *     - The language module to register\r\n   */\n  addLanguage: function (languageCode, language) {\n    if (!language.labels) {\n      throw new Error('language.labels must be defined!');\n    } // Add emojis\n\n\n    Object.assign(language.labels, emojis);\n    languages[languageCode] = language;\n  },\n\n  /**\r\n   * Retrieves a language object from the cache,\r\n   * or tries to load it from the set of supported languages\r\n   *\r\n   * @param {String} languageCode - Two-digit code for the language to fetch\r\n   */\n  getLanguage: function (languageCode) {\n    if (!languageCode) {\n      // Default to english if no language was specified\n      return languages.en;\n    }\n\n    if (!languages[languageCode]) {\n      // Try to load specified language\n      try {\n        // eslint-disable-next-line max-len\n        var language = require('../languages/' + languageCode + '/index'); // Add language to in-memory cache\n\n\n        this.addLanguage(languageCode, language);\n      } catch (err) {\n        throw new Error('No language found: ' + languageCode);\n      }\n    }\n\n    return languages[languageCode];\n  },\n\n  /**\r\n   * Returns AFINN-165 weighted labels for the specified language\r\n   *\r\n   * @param {String} languageCode - Two-digit language code\r\n   * @return {Object}\r\n   */\n  getLabels: function (languageCode) {\n    var language = this.getLanguage(languageCode);\n    return language.labels;\n  },\n\n  /**\r\n   * Applies a scoring strategy for the current token\r\n   *\r\n   * @param {String} languageCode - Two-digit language code\r\n   * @param {Array} tokens - Tokens of the phrase to analyze\r\n   * @param {int} cursor - Cursor of the current token being analyzed\r\n   * @param {int} tokenScore - The score of the current token being analyzed\r\n   */\n  applyScoringStrategy: function (languageCode, tokens, cursor, tokenScore) {\n    var language = this.getLanguage(languageCode); // Fallback to default strategy if none was specified\n    // eslint-disable-next-line max-len\n\n    var scoringStrategy = language.scoringStrategy || defaultScoringStrategy;\n    return scoringStrategy.apply(tokens, cursor, tokenScore);\n  }\n};\nvar defaultScoringStrategy = {\n  apply: function (tokens, cursor, tokenScore) {\n    return tokenScore;\n  }\n};","map":{"version":3,"sources":["D:/Shruthi/Shruthiproject/my-app/node_modules/sentiment/lib/language-processor.js"],"names":["emojis","require","enLanguage","Object","assign","labels","languages","en","module","exports","addLanguage","languageCode","language","Error","getLanguage","err","getLabels","applyScoringStrategy","tokens","cursor","tokenScore","scoringStrategy","defaultScoringStrategy","apply"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB,C,CAEA;;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,uBAAD,CAAxB,C,CACA;;;AACAE,MAAM,CAACC,MAAP,CAAcF,UAAU,CAACG,MAAzB,EAAiCL,MAAjC,E,CAEA;;AACA,IAAIM,SAAS,GAAG;AACZC,EAAAA,EAAE,EAAEL;AADQ,CAAhB;AAIAM,MAAM,CAACC,OAAP,GAAiB;AAEb;;;;;;;;AAQAC,EAAAA,WAAW,EAAE,UAAUC,YAAV,EAAwBC,QAAxB,EAAkC;AAC3C,QAAI,CAACA,QAAQ,CAACP,MAAd,EAAsB;AAClB,YAAM,IAAIQ,KAAJ,CAAU,kCAAV,CAAN;AACH,KAH0C,CAI3C;;;AACAV,IAAAA,MAAM,CAACC,MAAP,CAAcQ,QAAQ,CAACP,MAAvB,EAA+BL,MAA/B;AACAM,IAAAA,SAAS,CAACK,YAAD,CAAT,GAA0BC,QAA1B;AACH,GAjBY;;AAmBb;;;;;;AAMAE,EAAAA,WAAW,EAAE,UAASH,YAAT,EAAuB;AAChC,QAAI,CAACA,YAAL,EAAmB;AACf;AACA,aAAOL,SAAS,CAACC,EAAjB;AACH;;AACD,QAAI,CAACD,SAAS,CAACK,YAAD,CAAd,EAA8B;AAC1B;AACA,UAAI;AACA;AACA,YAAIC,QAAQ,GAAGX,OAAO,CAAC,kBAAkBU,YAAlB,GAAiC,QAAlC,CAAtB,CAFA,CAGA;;;AACA,aAAKD,WAAL,CAAiBC,YAAjB,EAA+BC,QAA/B;AACH,OALD,CAKE,OAAOG,GAAP,EAAY;AACV,cAAM,IAAIF,KAAJ,CAAU,wBAAwBF,YAAlC,CAAN;AACH;AACJ;;AACD,WAAOL,SAAS,CAACK,YAAD,CAAhB;AACH,GA1CY;;AA4Cb;;;;;;AAMAK,EAAAA,SAAS,EAAE,UAASL,YAAT,EAAuB;AAC9B,QAAIC,QAAQ,GAAG,KAAKE,WAAL,CAAiBH,YAAjB,CAAf;AACA,WAAOC,QAAQ,CAACP,MAAhB;AACH,GArDY;;AAuDb;;;;;;;;AAQAY,EAAAA,oBAAoB,EAAE,UAASN,YAAT,EAAuBO,MAAvB,EAA+BC,MAA/B,EAAuCC,UAAvC,EAAmD;AACrE,QAAIR,QAAQ,GAAG,KAAKE,WAAL,CAAiBH,YAAjB,CAAf,CADqE,CAErE;AACA;;AACA,QAAIU,eAAe,GAAGT,QAAQ,CAACS,eAAT,IAA4BC,sBAAlD;AACA,WAAOD,eAAe,CAACE,KAAhB,CAAsBL,MAAtB,EAA8BC,MAA9B,EAAsCC,UAAtC,CAAP;AACH;AArEY,CAAjB;AAwEA,IAAIE,sBAAsB,GAAG;AACzBC,EAAAA,KAAK,EAAE,UAASL,MAAT,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqC;AACxC,WAAOA,UAAP;AACH;AAHwB,CAA7B","sourcesContent":["var emojis = require('../build/emoji.json');\r\n\r\n// English is loaded by default\r\nvar enLanguage = require('../languages/en/index');\r\n// Add emojis\r\nObject.assign(enLanguage.labels, emojis);\r\n\r\n// Cache loaded languages\r\nvar languages = {\r\n    en: enLanguage\r\n};\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Registers the specified language\r\n     *\r\n     * @param {String} languageCode\r\n     *     - Two-digit code for the language to register\r\n     * @param {Object} language\r\n     *     - The language module to register\r\n     */\r\n    addLanguage: function (languageCode, language) {\r\n        if (!language.labels) {\r\n            throw new Error('language.labels must be defined!');\r\n        }\r\n        // Add emojis\r\n        Object.assign(language.labels, emojis);\r\n        languages[languageCode] = language;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a language object from the cache,\r\n     * or tries to load it from the set of supported languages\r\n     *\r\n     * @param {String} languageCode - Two-digit code for the language to fetch\r\n     */\r\n    getLanguage: function(languageCode) {\r\n        if (!languageCode) {\r\n            // Default to english if no language was specified\r\n            return languages.en;\r\n        }\r\n        if (!languages[languageCode]) {\r\n            // Try to load specified language\r\n            try {\r\n                // eslint-disable-next-line max-len\r\n                var language = require('../languages/' + languageCode + '/index');\r\n                // Add language to in-memory cache\r\n                this.addLanguage(languageCode, language);\r\n            } catch (err) {\r\n                throw new Error('No language found: ' + languageCode);\r\n            }\r\n        }\r\n        return languages[languageCode];\r\n    },\r\n\r\n    /**\r\n     * Returns AFINN-165 weighted labels for the specified language\r\n     *\r\n     * @param {String} languageCode - Two-digit language code\r\n     * @return {Object}\r\n     */\r\n    getLabels: function(languageCode) {\r\n        var language = this.getLanguage(languageCode);\r\n        return language.labels;\r\n    },\r\n\r\n    /**\r\n     * Applies a scoring strategy for the current token\r\n     *\r\n     * @param {String} languageCode - Two-digit language code\r\n     * @param {Array} tokens - Tokens of the phrase to analyze\r\n     * @param {int} cursor - Cursor of the current token being analyzed\r\n     * @param {int} tokenScore - The score of the current token being analyzed\r\n     */\r\n    applyScoringStrategy: function(languageCode, tokens, cursor, tokenScore) {\r\n        var language = this.getLanguage(languageCode);\r\n        // Fallback to default strategy if none was specified\r\n        // eslint-disable-next-line max-len\r\n        var scoringStrategy = language.scoringStrategy || defaultScoringStrategy;\r\n        return scoringStrategy.apply(tokens, cursor, tokenScore);\r\n    }\r\n};\r\n\r\nvar defaultScoringStrategy = {\r\n    apply: function(tokens, cursor, tokenScore) {\r\n        return tokenScore;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}